import pathlib

import faery

@faery.task(suffix=".png", icon="ðŸŽ¢")
def event_rate(
    input: pathlib.Path,
    output: pathlib.Path,
    start: faery.TimeOrTimecode,
    end: faery.TimeOrTimecode,
):
    (
        faery.events_stream_from_file(input)
        .time_slice(start=start, end=end)
        .to_event_rate()
        .to_file(output)
    )


@faery.task(suffix=".png", icon="ðŸŽ¨")
def kinectograph(
    input: pathlib.Path,
    output: pathlib.Path,
    start: faery.TimeOrTimecode,
    end: faery.TimeOrTimecode,
):
    (
        faery.events_stream_from_file(input)
        .time_slice(start=start, end=end)
        .to_kinectograph(on_progress=faery.progress_bar_fold)
        .scale()
        .render()
        .to_file(output)
    )


@faery.task(suffix=".png", icon="ðŸŽ¨")
def kinectograph_dense(
    input: pathlib.Path,
    output: pathlib.Path,
    start: faery.TimeOrTimecode,
    end: faery.TimeOrTimecode,
):
    (
        faery.events_stream_from_file(input)
        .time_slice(start=start, end=end)
        .to_kinectograph(on_progress=faery.progress_bar_fold)
        .scale()
        .render(
            color_theme=faery.DARK_COLOR_THEME.replace(
                colormap=faery.colormaps.roma_o.repeated(
                    count=4,
                    flip_odd_indices=True,
                )
            )
        )
        .to_file(output)
    )


@faery.task(suffix=".gif", icon="ðŸ‘‹")
def wiggle(
    input: pathlib.Path,
    output: pathlib.Path,
    start: faery.TimeOrTimecode,
    end: faery.TimeOrTimecode,
):
    stream = faery.events_stream_from_file(input).time_slice(start=start, end=end)
    wiggle_parameters = faery.WiggleParameters(time_range=stream.time_range())
    (
        stream.regularize(frequency_hz=wiggle_parameters.frequency_hz)
        .render(
            decay=wiggle_parameters.decay,
            tau=wiggle_parameters.tau,
            colormap=faery.colormaps.managua.flipped(),
        )
        .scale()
        .add_timecode(output_frame_rate=wiggle_parameters.frame_rate)
        .to_file(
            path=output,
            frame_rate=wiggle_parameters.frame_rate,
            rewind=wiggle_parameters.rewind,
            skip=wiggle_parameters.skip,
            on_progress=faery.progress_bar_fold,
        )
    )

@faery.task(suffix=".mp4", icon="ðŸŽ¬")
def video(
    input: pathlib.Path,
    output: pathlib.Path,
    start: faery.TimeOrTimecode,
    end: faery.TimeOrTimecode,
):
    (
        faery.events_stream_from_file(input)
        .time_slice(start=start, end=end)
        .regularize(frequency_hz=60.0, start=start)
        .render(
            decay="exponential",
            tau="00:00:00.100000",
            colormap=faery.colormaps.starry_night,
        )
        .scale()
        .add_timecode()
        .to_file(output, on_progress=faery.progress_bar_fold)
    )


tasks: list[faery.Task] = [event_rate, kinectograph, kinectograph_dense, wiggle, video]

job_manager = faery.JobManager()

{{#jobs}}
job_manager.add(
    {{&input}},
    "{{&start}}",
    "{{&end}}",
    tasks,
    {{#nickname}}
    nickname="{{&nickname}}"
    {{/nickname}}
)

{{/jobs}}
job_manager.run()
